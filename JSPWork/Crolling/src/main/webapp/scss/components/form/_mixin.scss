@use '../../common/variables' as var;
@use '../../common/color' as color;
@use '../../common/' as *;

@use 'sass:string';


@function svgRdIcon($color){
  $color: '%23' + str-replace( #{$color}, "#", "");
  $icon: "data:image/svg+xml,%3Csvg version='1.1' width='26' height='26' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 26 26' style='enable-background:new 0 0 26 26;' xml:space='preserve'%3E%3Ccircle fill='#{$color}' cx='13' cy='13' r='5'/%3E%3C/svg%3E%0A";
  @return url($icon);
}

@function svgChIcon($color){
  $color: '%23' + str-replace( #{$color}, "#", "");
  // $icon: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' id='check_big' width='16' height='16' viewBox='0 0 16 16'%3E%3Cpath data-name='Path 514' d='M0 0h16v16H0z' style='fill:none'/%3E%3Cpath data-name='Path 515' d='M7.135 12.637 4.356 9.86l-.946.94 3.725 3.723 8-7.993-.94-.939z' transform='translate(-1.134 -1.859)' fill='#{$color}' /%3E%3C/svg%3E%0A";
  $icon: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='9' viewBox='0 0 12 9'%3E%3Cpath d='m16.539 20.245 5.661-5.656-1.414-1.414-5.657 5.656L12 15.707l-1.414 1.414 3.124 3.124 1.414 1.414z' transform='translate(-10.587 -13.174)' fill='#{$color}' /%3E%3C/svg%3E%0A";
  @return url($icon);
}

@mixin item() {
  font-weight: inherit;
  outline: 0;
  letter-spacing: -0.025em;

  border: 1px solid #ddd;
  background-color: #ffffff;
  color: #222222;

  @content;
}

@mixin size($fs : 16, $width : 300, $height : 50){
  font-size   : rem($fs);
  width       : rem($width);
  height      : rem($height);
  line-height : rem( ($height - 2));
  padding : {
    left : em(15, $fs);
    right: em(15, $fs);
  }
  @content;
}


@mixin color($bg, $text, $border, $bg-hover) {
  background: $bg;

  color: $text;

  @if $border {
      border-color: $border;
  }

  @else {
      border: 0px;
  }

  @content;
}

@mixin  placeholder($bg : null, $text : null, $border : null) {
  &::placeholder{
    @if $bg   {
      background-color: $bg;
    }
    @if $text {
      color: $text;
    }
    @if $border {
      border-color: $border;
    }
    font-weight: 300;
    opacity: 1; /* 파이어폭스에서 뿌옇게 나오는 현상을 방지하기 위한 css */
  }
  &::-webkit-input-placeholder{
    @if $bg   {
      background-color: $bg;
    }
    @if $text {
      color: $text;
    }
    @if $border {
      border-color: $border;
    }
    color: $text;
    font-weight: 300;
  }
  &::-moz-placeholder{
    @if $bg   {
      background-color: $bg;
    }
    @if $text {
      color: $text;
    }
    @if $border {
      border-color: $border;
    }
    color: $text;
    font-weight: 300;
    opacity: 1; /* 파이어폭스에서 뿌옇게 나오는 현상을 방지하기 위한 css */
  }
  &:-ms-input-placeholder  {
    @if $bg   {
      background-color: $bg;
    }
    @if $text {
      color: $text;
    }
    @if $border {
      border-color: $border;
    }
    color: $text;
    font-weight: 300;
  }
}


@mixin item-chrd() {
  display: inline-block;
  position: relative;
  vertical-align: middle;
  cursor: pointer;

  outline: 0;
  letter-spacing: -0.025em;


  > span{
    vertical-align: middle;
    line-height: 1.5em;
  }

  ._icon{
    overflow: hidden;
    position: relative;
    display: inline-block;
    line-height: 1.5em;

    background-color: #ffffff;

    &::before, &::after {
      content: "";
      display: block !important;
      position: absolute;
      left: 50%;
      top: 50%;
      width: 100%;
      height: 100%;
      transform: translate(-50%, -50%);
      background-repeat: no-repeat;
      background-position: center center;
    }
    &::before{
      border: 1px solid color.$color-border;
      border-radius: rem(4);
    }
    &::after{
      @include vendor(transition, 'transform 0.3s cubic-bezier(0, 0.81, 0.36, 1.14)');
      transform: translate(-50%, -50%) scale(0);
    }
  }

  input[type=radio],
  input[type=checkbox] {
    position: absolute;
    top: 0 !important;
    left: 0 !important;
    line-height: 0 !important;
    font-size: 0 !important;
    width: 0 !important;
    height: 0 !important;
    color: transparent !important;
    overflow: hidden !important;
    opacity: 0;
    &:checked + ._icon {
        &::before {
            border-color: #222;
            background-color: #222;
        }
        &::after {
            transform: translate(-50%, -50%) scale(1);
        }
    }
    &[disabled=true],
    &[disabled=disabled]{
      &+ ._icon {
        &::before {
            border-color: #ddd !important;
            background-color: #e5e5e5 !important;
        }
        &::after {
            display: none !important;
        }
      }
    }
  }
  @each $idx, $color in color.$colors {
      &.c#{$idx} {
          input[type=radio],
          input[type=checkbox] {
              &:checked + ._icon {
                &::before {
                  border-color: $color;
                  background-color: $color;
                }
              }
          }
      }
  }
  @content;
}

@mixin size-chrd($fs : 16, $width : 27, $round : 0){
  font-size   : rem($fs);
  ._icon{
    font-size   : 1rem;
    width       : em($width);
    height      : em($width);
    @if $round == 100%{
      border-radius: 100%;
    }@else if $round != 0{
      border-radius: em($round);
    }
    &::before {
      @if $round == 100%{
        border-radius: 100%;
      }@else if $round != 0{
        border-radius: em($round);
      }
      background-color: #ffffff;
    }
  }
  @content;
}
